
stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ac  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004dc  080004dc  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004ec  080004ec  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004ec  080004ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004f4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004f8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004f8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000057b  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000287  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00002830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000065  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fff5  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bdc  00000000  00000000  00012922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054095  00000000  00000000  000134fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000675d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00067730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080004c4 	.word	0x080004c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080004c4 	.word	0x080004c4

08000170 <SysClock_Init>:
#include<stm32f103x6.h>

volatile uint32_t msTick = 0;

void SysClock_Init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable HSE
	RCC->CR |= (1U<<16);
 8000174:	4b39      	ldr	r3, [pc, #228]	@ (800025c <SysClock_Init+0xec>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a38      	ldr	r2, [pc, #224]	@ (800025c <SysClock_Init+0xec>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	while( (RCC->CR & (1U<<17)) == 0 );
 8000180:	bf00      	nop
 8000182:	4b36      	ldr	r3, [pc, #216]	@ (800025c <SysClock_Init+0xec>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <SysClock_Init+0x12>

	FLASH->ACR = (FLASH->ACR &~ (7U)) | (2U); //FLASH LATENCY WITH LAGRE PULSE
 800018e:	4b34      	ldr	r3, [pc, #208]	@ (8000260 <SysClock_Init+0xf0>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f023 0307 	bic.w	r3, r3, #7
 8000196:	4a32      	ldr	r2, [pc, #200]	@ (8000260 <SysClock_Init+0xf0>)
 8000198:	f043 0302 	orr.w	r3, r3, #2
 800019c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (1U<<4);
 800019e:	4b30      	ldr	r3, [pc, #192]	@ (8000260 <SysClock_Init+0xf0>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000260 <SysClock_Init+0xf0>)
 80001a4:	f043 0310 	orr.w	r3, r3, #16
 80001a8:	6013      	str	r3, [r2, #0]

	/* 3) Prescaler đặt TRƯỚC khi switch SYSCLK để tránh quá xung */
	RCC->CFGR = (RCC->CFGR &~(3U<<14)) | (2U<<14); //ADCPRE DEVIDE 6
 80001aa:	4b2c      	ldr	r3, [pc, #176]	@ (800025c <SysClock_Init+0xec>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80001b2:	4a2a      	ldr	r2, [pc, #168]	@ (800025c <SysClock_Init+0xec>)
 80001b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~(7U<<11))| (0x0U<<11); // APB2 NOT DEVIDE
 80001ba:	4b28      	ldr	r3, [pc, #160]	@ (800025c <SysClock_Init+0xec>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a27      	ldr	r2, [pc, #156]	@ (800025c <SysClock_Init+0xec>)
 80001c0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80001c4:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~(7U<<8)) | (4U<<8); //APB1 DEVICE 2
 80001c6:	4b25      	ldr	r3, [pc, #148]	@ (800025c <SysClock_Init+0xec>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80001ce:	4a23      	ldr	r2, [pc, #140]	@ (800025c <SysClock_Init+0xec>)
 80001d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001d4:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~(7U<<4)) | (0x0U<<4); //AHB NOT DEVIDE
 80001d6:	4b21      	ldr	r3, [pc, #132]	@ (800025c <SysClock_Init+0xec>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4a20      	ldr	r2, [pc, #128]	@ (800025c <SysClock_Init+0xec>)
 80001dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80001e0:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~(1<<17); // PLLXTPRE = 0
 80001e2:	4b1e      	ldr	r3, [pc, #120]	@ (800025c <SysClock_Init+0xec>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	4a1d      	ldr	r2, [pc, #116]	@ (800025c <SysClock_Init+0xec>)
 80001e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80001ec:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (1<<16); //PLLSRC = 1
 80001ee:	4b1b      	ldr	r3, [pc, #108]	@ (800025c <SysClock_Init+0xec>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	4a1a      	ldr	r2, [pc, #104]	@ (800025c <SysClock_Init+0xec>)
 80001f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001f8:	6053      	str	r3, [r2, #4]
	RCC->CFGR = (RCC->CFGR &~ (0XFU<<18)) | (7U<<18); //PLLMUL X 9
 80001fa:	4b18      	ldr	r3, [pc, #96]	@ (800025c <SysClock_Init+0xec>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000202:	4a16      	ldr	r2, [pc, #88]	@ (800025c <SysClock_Init+0xec>)
 8000204:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000208:	6053      	str	r3, [r2, #4]

	RCC->CR |= (1U<<24); //PLLON
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <SysClock_Init+0xec>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a13      	ldr	r2, [pc, #76]	@ (800025c <SysClock_Init+0xec>)
 8000210:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000214:	6013      	str	r3, [r2, #0]
	while( (RCC->CR & (1U<<25)) == 0 ); //WAIT PLL READY
 8000216:	bf00      	nop
 8000218:	4b10      	ldr	r3, [pc, #64]	@ (800025c <SysClock_Init+0xec>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <SysClock_Init+0xa8>

	RCC->CFGR = (RCC->CFGR &~ (3U)) | (2U); //SW = PLL
 8000224:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <SysClock_Init+0xec>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	f023 0303 	bic.w	r3, r3, #3
 800022c:	4a0b      	ldr	r2, [pc, #44]	@ (800025c <SysClock_Init+0xec>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6053      	str	r3, [r2, #4]
	while (((RCC->CFGR >> 2) & 0x3U) != 0x2U); //WAIT SWS == PLL
 8000234:	bf00      	nop
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <SysClock_Init+0xec>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	089b      	lsrs	r3, r3, #2
 800023c:	f003 0303 	and.w	r3, r3, #3
 8000240:	2b02      	cmp	r3, #2
 8000242:	d1f8      	bne.n	8000236 <SysClock_Init+0xc6>

	//ENABLE CLOCK FOR GPIOC,TIMER1,GPIOA
	RCC->APB2ENR |= (1U<<2)|(1U<<4)|(1U<<11);
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <SysClock_Init+0xec>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a04      	ldr	r2, [pc, #16]	@ (800025c <SysClock_Init+0xec>)
 800024a:	f443 6301 	orr.w	r3, r3, #2064	@ 0x810
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]

}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000
 8000260:	40022000 	.word	0x40022000

08000264 <GPIO_Init>:
void GPIO_Init(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	GPIOC->CRH = (GPIOC->CRH &~(0XF<<20)) | (0X3<<20);
 8000268:	4b08      	ldr	r3, [pc, #32]	@ (800028c <GPIO_Init+0x28>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000270:	4a06      	ldr	r2, [pc, #24]	@ (800028c <GPIO_Init+0x28>)
 8000272:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000276:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1U<<13);
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <GPIO_Init+0x28>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a03      	ldr	r2, [pc, #12]	@ (800028c <GPIO_Init+0x28>)
 800027e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000282:	60d3      	str	r3, [r2, #12]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40011000 	.word	0x40011000

08000290 <SysTick_Init>:
void SysTick_Init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	SysTick->LOAD = 72000 - 1;
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <SysTick_Init+0x24>)
 8000296:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <SysTick_Init+0x28>)
 8000298:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <SysTick_Init+0x24>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 7u<<0;
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <SysTick_Init+0x24>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a03      	ldr	r2, [pc, #12]	@ (80002b4 <SysTick_Init+0x24>)
 80002a6:	f043 0307 	orr.w	r3, r3, #7
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	0001193f 	.word	0x0001193f

080002bc <SysTick_Handler>:
void SysTick_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	msTick ++;
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <SysTick_Handler+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a03      	ldr	r2, [pc, #12]	@ (80002d4 <SysTick_Handler+0x18>)
 80002c8:	6013      	str	r3, [r2, #0]
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000020 	.word	0x20000020

080002d8 <delay>:

void delay(uint32_t delay)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	uint32_t start = msTick;
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <delay+0x2c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	60fb      	str	r3, [r7, #12]
	while( (msTick-start) < delay );
 80002e6:	bf00      	nop
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <delay+0x2c>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8f8      	bhi.n	80002e8 <delay+0x10>
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000020 	.word	0x20000020

08000308 <main>:
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	SysClock_Init();
 800030c:	f7ff ff30 	bl	8000170 <SysClock_Init>
	GPIO_Init();
 8000310:	f7ff ffa8 	bl	8000264 <GPIO_Init>
	SysTick_Init();
 8000314:	f7ff ffbc 	bl	8000290 <SysTick_Init>
	SystemCoreClockUpdate();
 8000318:	f000 f83e 	bl	8000398 <SystemCoreClockUpdate>
	while(1)
	{
		GPIOC->ODR ^= (1U<<13);
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <main+0x2c>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a04      	ldr	r2, [pc, #16]	@ (8000334 <main+0x2c>)
 8000322:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000326:	60d3      	str	r3, [r2, #12]
		delay(1000);
 8000328:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800032c:	f7ff ffd4 	bl	80002d8 <delay>
		GPIOC->ODR ^= (1U<<13);
 8000330:	bf00      	nop
 8000332:	e7f3      	b.n	800031c <main+0x14>
 8000334:	40011000 	.word	0x40011000

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f000 f825 	bl	800038a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f889 	bl	800047c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800036a:	f7ff ffcd 	bl	8000308 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800037c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000380:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000384:	20000024 	.word	0x20000024

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>

0800038a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
	...

08000398 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	2300      	movs	r3, #0
 80003a8:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <SystemCoreClockUpdate+0xd0>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f003 030c 	and.w	r3, r3, #12
 80003b2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d011      	beq.n	80003de <SystemCoreClockUpdate+0x46>
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d83a      	bhi.n	8000436 <SystemCoreClockUpdate+0x9e>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <SystemCoreClockUpdate+0x36>
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	d004      	beq.n	80003d6 <SystemCoreClockUpdate+0x3e>
 80003cc:	e033      	b.n	8000436 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80003ce:	4b27      	ldr	r3, [pc, #156]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 80003d0:	4a27      	ldr	r2, [pc, #156]	@ (8000470 <SystemCoreClockUpdate+0xd8>)
 80003d2:	601a      	str	r2, [r3, #0]
      break;
 80003d4:	e033      	b.n	800043e <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80003d6:	4b25      	ldr	r3, [pc, #148]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 80003d8:	4a25      	ldr	r2, [pc, #148]	@ (8000470 <SystemCoreClockUpdate+0xd8>)
 80003da:	601a      	str	r2, [r3, #0]
      break;
 80003dc:	e02f      	b.n	800043e <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003de:	4b22      	ldr	r3, [pc, #136]	@ (8000468 <SystemCoreClockUpdate+0xd0>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80003e6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000468 <SystemCoreClockUpdate+0xd0>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003f0:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	0c9b      	lsrs	r3, r3, #18
 80003f6:	3302      	adds	r3, #2
 80003f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d106      	bne.n	800040e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	4a1c      	ldr	r2, [pc, #112]	@ (8000474 <SystemCoreClockUpdate+0xdc>)
 8000404:	fb02 f303 	mul.w	r3, r2, r3
 8000408:	4a18      	ldr	r2, [pc, #96]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 800040a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800040c:	e017      	b.n	800043e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800040e:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <SystemCoreClockUpdate+0xd0>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d006      	beq.n	8000428 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <SystemCoreClockUpdate+0xdc>)
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 8000424:	6013      	str	r3, [r2, #0]
      break;
 8000426:	e00a      	b.n	800043e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	4a11      	ldr	r2, [pc, #68]	@ (8000470 <SystemCoreClockUpdate+0xd8>)
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 8000432:	6013      	str	r3, [r2, #0]
      break;
 8000434:	e003      	b.n	800043e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 8000438:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <SystemCoreClockUpdate+0xd8>)
 800043a:	601a      	str	r2, [r3, #0]
      break;
 800043c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800043e:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <SystemCoreClockUpdate+0xd0>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	4a0b      	ldr	r2, [pc, #44]	@ (8000478 <SystemCoreClockUpdate+0xe0>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800044e:	4b07      	ldr	r3, [pc, #28]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	fa22 f303 	lsr.w	r3, r2, r3
 8000458:	4a04      	ldr	r2, [pc, #16]	@ (800046c <SystemCoreClockUpdate+0xd4>)
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	20000000 	.word	0x20000000
 8000470:	007a1200 	.word	0x007a1200
 8000474:	003d0900 	.word	0x003d0900
 8000478:	080004dc 	.word	0x080004dc

0800047c <__libc_init_array>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	2600      	movs	r6, #0
 8000480:	4d0c      	ldr	r5, [pc, #48]	@ (80004b4 <__libc_init_array+0x38>)
 8000482:	4c0d      	ldr	r4, [pc, #52]	@ (80004b8 <__libc_init_array+0x3c>)
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	42a6      	cmp	r6, r4
 800048a:	d109      	bne.n	80004a0 <__libc_init_array+0x24>
 800048c:	f000 f81a 	bl	80004c4 <_init>
 8000490:	2600      	movs	r6, #0
 8000492:	4d0a      	ldr	r5, [pc, #40]	@ (80004bc <__libc_init_array+0x40>)
 8000494:	4c0a      	ldr	r4, [pc, #40]	@ (80004c0 <__libc_init_array+0x44>)
 8000496:	1b64      	subs	r4, r4, r5
 8000498:	10a4      	asrs	r4, r4, #2
 800049a:	42a6      	cmp	r6, r4
 800049c:	d105      	bne.n	80004aa <__libc_init_array+0x2e>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a4:	4798      	blx	r3
 80004a6:	3601      	adds	r6, #1
 80004a8:	e7ee      	b.n	8000488 <__libc_init_array+0xc>
 80004aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ae:	4798      	blx	r3
 80004b0:	3601      	adds	r6, #1
 80004b2:	e7f2      	b.n	800049a <__libc_init_array+0x1e>
 80004b4:	080004ec 	.word	0x080004ec
 80004b8:	080004ec 	.word	0x080004ec
 80004bc:	080004ec 	.word	0x080004ec
 80004c0:	080004f0 	.word	0x080004f0

080004c4 <_init>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr

080004d0 <_fini>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr
