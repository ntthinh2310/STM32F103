
stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c04  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d34  08000d34  00001d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d44  08000d44  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d44  08000d44  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d44  08000d44  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d44  08000d44  00001d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d48  08000d48  00001d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000d4c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000018  08000d64  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000d64  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000859  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000301  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008d  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168be  00000000  00000000  00002cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000de6  00000000  00000000  000195b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054071  00000000  00000000  0001a399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006e40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003a0  00000000  00000000  0006e450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0006e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d1c 	.word	0x08000d1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000d1c 	.word	0x08000d1c

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <SysClock_Init>:
#include <stm32f101x6.h>

volatile uint32_t msTick = 0;

void SysClock_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
    // Enable HSE
    RCC->CR |= (1U<<16);
 800075c:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <SysClock_Init+0xf4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a3a      	ldr	r2, [pc, #232]	@ (800084c <SysClock_Init+0xf4>)
 8000762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000766:	6013      	str	r3, [r2, #0]
    while((RCC->CR & (1U<<17)) == 0);
 8000768:	bf00      	nop
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <SysClock_Init+0xf4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0f9      	beq.n	800076a <SysClock_Init+0x12>

    FLASH->ACR = (FLASH->ACR &~ (7U)) | (2U);
 8000776:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <SysClock_Init+0xf8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f023 0307 	bic.w	r3, r3, #7
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <SysClock_Init+0xf8>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (1U<<4);
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <SysClock_Init+0xf8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a31      	ldr	r2, [pc, #196]	@ (8000850 <SysClock_Init+0xf8>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6013      	str	r3, [r2, #0]

    // Prescaler
    RCC->CFGR = (RCC->CFGR &~(3U<<14)) | (2U<<14); // ADCPRE DIVIDE 6
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <SysClock_Init+0xf4>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800079a:	4a2c      	ldr	r2, [pc, #176]	@ (800084c <SysClock_Init+0xf4>)
 800079c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR = (RCC->CFGR &~(7U<<11))| (0x0U<<11); // APB2 NOT DIVIDE
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <SysClock_Init+0xf4>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <SysClock_Init+0xf4>)
 80007a8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80007ac:	6053      	str	r3, [r2, #4]
    RCC->CFGR = (RCC->CFGR &~(7U<<8)) | (4U<<8); // APB1 DIVIDE 2
 80007ae:	4b27      	ldr	r3, [pc, #156]	@ (800084c <SysClock_Init+0xf4>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80007b6:	4a25      	ldr	r2, [pc, #148]	@ (800084c <SysClock_Init+0xf4>)
 80007b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007bc:	6053      	str	r3, [r2, #4]
    RCC->CFGR = (RCC->CFGR &~(7U<<4)) | (0x0U<<4); // AHB NOT DIVIDE
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <SysClock_Init+0xf4>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <SysClock_Init+0xf4>)
 80007c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80007c8:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~(1<<17); // PLLXTPRE = 0
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <SysClock_Init+0xf4>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	4a1f      	ldr	r2, [pc, #124]	@ (800084c <SysClock_Init+0xf4>)
 80007d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007d4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (1<<16); // PLLSRC = 1
 80007d6:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <SysClock_Init+0xf4>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <SysClock_Init+0xf4>)
 80007dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007e0:	6053      	str	r3, [r2, #4]
    RCC->CFGR = (RCC->CFGR &~ (0xFU<<18)) | (7U<<18); // PLLMUL X 9
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <SysClock_Init+0xf4>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <SysClock_Init+0xf4>)
 80007ec:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80007f0:	6053      	str	r3, [r2, #4]

    RCC->CR |= (1U<<24); // PLLON
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <SysClock_Init+0xf4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <SysClock_Init+0xf4>)
 80007f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007fc:	6013      	str	r3, [r2, #0]
    while((RCC->CR & (1U<<25)) == 0); // WAIT PLL READY
 80007fe:	bf00      	nop
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <SysClock_Init+0xf4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f9      	beq.n	8000800 <SysClock_Init+0xa8>

    RCC->CFGR = (RCC->CFGR &~ (3U)) | (2U); // SW = PLL
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <SysClock_Init+0xf4>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f023 0303 	bic.w	r3, r3, #3
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <SysClock_Init+0xf4>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6053      	str	r3, [r2, #4]
    while(((RCC->CFGR >> 2) & 0x3U) != 0x2U); // WAIT SWS == PLL
 800081c:	bf00      	nop
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <SysClock_Init+0xf4>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	2b02      	cmp	r3, #2
 800082a:	d1f8      	bne.n	800081e <SysClock_Init+0xc6>

    RCC->APB2ENR |= (1U<<2) | (1U<<4); // GPIOA, GPIOC
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <SysClock_Init+0xf4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <SysClock_Init+0xf4>)
 8000832:	f043 0314 	orr.w	r3, r3, #20
 8000836:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= (1U<<0); // TIM2
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <SysClock_Init+0xf4>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a03      	ldr	r2, [pc, #12]	@ (800084c <SysClock_Init+0xf4>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	61d3      	str	r3, [r2, #28]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021000 	.word	0x40021000
 8000850:	40022000 	.word	0x40022000

08000854 <GPIO_Init>:

void GPIO_Init(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
    // PC13 as output (LED)
    GPIOC->CRH = (GPIOC->CRH &~(0xF<<20)) | (0x3<<20);
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <GPIO_Init+0x38>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000860:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <GPIO_Init+0x38>)
 8000862:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000866:	6053      	str	r3, [r2, #4]
    GPIOC->ODR &= ~(1U<<13);
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <GPIO_Init+0x38>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <GPIO_Init+0x38>)
 800086e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000872:	60d3      	str	r3, [r2, #12]

    // PA0 as Alternate Function Push-Pull (TIM2_CH1)
    GPIOA->CRL = (GPIOA->CRL &~(0xF<<0)) | (0xB<<0);
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <GPIO_Init+0x3c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <GPIO_Init+0x3c>)
 800087e:	f043 030b 	orr.w	r3, r3, #11
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40011000 	.word	0x40011000
 8000890:	40010800 	.word	0x40010800

08000894 <SysTick_Init>:

void SysTick_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
    SysTick->LOAD = 72000 - 1; // 1ms at 72MHz
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <SysTick_Init+0x24>)
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <SysTick_Init+0x28>)
 800089c:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <SysTick_Init+0x24>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    SysTick->CTRL |= 7u<<0;
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <SysTick_Init+0x24>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a03      	ldr	r2, [pc, #12]	@ (80008b8 <SysTick_Init+0x24>)
 80008aa:	f043 0307 	orr.w	r3, r3, #7
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	e000e010 	.word	0xe000e010
 80008bc:	0001193f 	.word	0x0001193f

080008c0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
    msTick++;
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <SysTick_Handler+0x18>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a03      	ldr	r2, [pc, #12]	@ (80008d8 <SysTick_Handler+0x18>)
 80008cc:	6013      	str	r3, [r2, #0]
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000034 	.word	0x20000034

080008dc <Timer2_PWM_Init>:

void Timer2_PWM_Init(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    // Prescaler: 72 - 1 = 71 (Timer clock = 1MHz)
    TIM2->PSC = 71;
 80008e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e4:	2247      	movs	r2, #71	@ 0x47
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28

    // Auto-reload value: 20000 - 1 = 19999 (20ms period for 50Hz)
    TIM2->ARR = 19999;
 80008e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Initial pulse width: 0.5ms (0 degrees)
    TIM2->CCR1 = 500;
 80008f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008fa:	635a      	str	r2, [r3, #52]	@ 0x34

    // Configure TIM2 Channel 1 as PWM mode 1
    TIM2->CCMR1 &= ~(0xFF<<0);
 80008fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800090a:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6U<<4);  // OC1M = 110 (PWM mode 1)
 800090c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000916:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800091a:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (1U<<3);  // OC1PE = 1 (Preload enable)
 800091c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	6193      	str	r3, [r2, #24]

    // Enable Capture/Compare output
    TIM2->CCER |= (1U<<0);   // CC1E = 1
 800092c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6213      	str	r3, [r2, #32]

    // Enable auto-reload preload
    TIM2->CR1 |= (1U<<7);    // ARPE = 1
 800093c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094a:	6013      	str	r3, [r2, #0]

    // Enable counter
    TIM2->CR1 |= (1U<<0);    // CEN = 1
 800094c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]

    // Generate update event
    TIM2->EGR |= (1U<<0);    // UG = 1
 800095c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6153      	str	r3, [r2, #20]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <Servo_SetAngle>:

void Servo_SetAngle(uint16_t angle)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
    if(angle > 180) angle = 180;
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2bb4      	cmp	r3, #180	@ 0xb4
 8000982:	d901      	bls.n	8000988 <Servo_SetAngle+0x14>
 8000984:	23b4      	movs	r3, #180	@ 0xb4
 8000986:	80fb      	strh	r3, [r7, #6]

    // Map angle to pulse width: 0° = 0.5ms, 180° = 2.5ms
    // pulse = 500 + (angle * 2000 / 180)
    uint16_t pulse = 500 + ((uint32_t)angle * 2000) / 180;
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <Servo_SetAngle+0x44>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	b29b      	uxth	r3, r3
 800099e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80009a2:	81fb      	strh	r3, [r7, #14]
    TIM2->CCR1 = pulse;
 80009a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a8:	89fb      	ldrh	r3, [r7, #14]
 80009aa:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	16c16c17 	.word	0x16c16c17

080009bc <Servo_StartMove>:
    .is_moving = 0
};

// Khởi động chuyển động từ góc hiện tại đến góc đích
void Servo_StartMove(float target_angle, uint32_t duration_ms)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    // Lấy góc hiện tại từ CCR1
    uint16_t current_pulse = TIM2->CCR1;
 80009c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009cc:	81fb      	strh	r3, [r7, #14]
    servo.start_angle = (float)(current_pulse - 500) * 180.0f / 2000.0f;
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc85 	bl	80002e4 <__aeabi_i2f>
 80009da:	4603      	mov	r3, r0
 80009dc:	4918      	ldr	r1, [pc, #96]	@ (8000a40 <Servo_StartMove+0x84>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fcd4 	bl	800038c <__aeabi_fmul>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4917      	ldr	r1, [pc, #92]	@ (8000a44 <Servo_StartMove+0x88>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd83 	bl	80004f4 <__aeabi_fdiv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <Servo_StartMove+0x8c>)
 80009f4:	601a      	str	r2, [r3, #0]

    // Set góc đích
    if(target_angle > 180.0f) target_angle = 180.0f;
 80009f6:	4912      	ldr	r1, [pc, #72]	@ (8000a40 <Servo_StartMove+0x84>)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe83 	bl	8000704 <__aeabi_fcmpgt>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <Servo_StartMove+0x4c>
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <Servo_StartMove+0x84>)
 8000a06:	607b      	str	r3, [r7, #4]
    if(target_angle < 0.0f) target_angle = 0.0f;
 8000a08:	f04f 0100 	mov.w	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fe5b 	bl	80006c8 <__aeabi_fcmplt>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <Servo_StartMove+0x62>
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
    servo.end_angle = target_angle;
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <Servo_StartMove+0x8c>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6053      	str	r3, [r2, #4]

    // Set thời gian
    servo.start_time = msTick;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <Servo_StartMove+0x90>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <Servo_StartMove+0x8c>)
 8000a2a:	6093      	str	r3, [r2, #8]
    servo.duration = duration_ms;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <Servo_StartMove+0x8c>)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	60d3      	str	r3, [r2, #12]
    servo.is_moving = 1;
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <Servo_StartMove+0x8c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	741a      	strb	r2, [r3, #16]
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	43340000 	.word	0x43340000
 8000a44:	44fa0000 	.word	0x44fa0000
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000034 	.word	0x20000034

08000a50 <Servo_Update>:

// Cập nhật vị trí servo (gọi liên tục trong main loop)
void Servo_Update(void)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
    if(!servo.is_moving) return;
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <Servo_Update+0xd4>)
 8000a58:	7c1b      	ldrb	r3, [r3, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d05e      	beq.n	8000b1c <Servo_Update+0xcc>

    // Tính thời gian đã trôi qua
    uint32_t elapsed = msTick - servo.start_time;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <Servo_Update+0xd8>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <Servo_Update+0xd4>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	60fb      	str	r3, [r7, #12]

    if(elapsed >= servo.duration) {
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <Servo_Update+0xd4>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d324      	bcc.n	8000abe <Servo_Update+0x6e>
        // Di chuyển hoàn thành
        Servo_SetAngle((uint16_t)servo.end_angle);
 8000a74:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <Servo_Update+0xd4>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe4d 	bl	8000718 <__aeabi_f2uiz>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff76 	bl	8000974 <Servo_SetAngle>
        servo.is_moving = 0;
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <Servo_Update+0xd4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	741a      	strb	r2, [r3, #16]

        // Tự động đổi chiều
        if(servo.end_angle >= 180.0f) {
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <Servo_Update+0xd4>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4926      	ldr	r1, [pc, #152]	@ (8000b2c <Servo_Update+0xdc>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe2b 	bl	80006f0 <__aeabi_fcmpge>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d007      	beq.n	8000ab0 <Servo_Update+0x60>
            Servo_StartMove(0.0f, servo.duration);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <Servo_Update+0xd4>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	f7ff ff87 	bl	80009bc <Servo_StartMove>
        } else {
            Servo_StartMove(180.0f, servo.duration);
        }
        return;
 8000aae:	e036      	b.n	8000b1e <Servo_Update+0xce>
            Servo_StartMove(180.0f, servo.duration);
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <Servo_Update+0xd4>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481d      	ldr	r0, [pc, #116]	@ (8000b2c <Servo_Update+0xdc>)
 8000ab8:	f7ff ff80 	bl	80009bc <Servo_StartMove>
        return;
 8000abc:	e02f      	b.n	8000b1e <Servo_Update+0xce>
    }

    // Linear interpolation
    // current = start + (end - start) * progress
    float progress = (float)elapsed / (float)servo.duration;
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fc0c 	bl	80002dc <__aeabi_ui2f>
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <Servo_Update+0xd4>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fc06 	bl	80002dc <__aeabi_ui2f>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f7ff fd0d 	bl	80004f4 <__aeabi_fdiv>
 8000ada:	4603      	mov	r3, r0
 8000adc:	60bb      	str	r3, [r7, #8]
    float current_angle = servo.start_angle +
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <Servo_Update+0xd4>)
 8000ae0:	681c      	ldr	r4, [r3, #0]
                         (servo.end_angle - servo.start_angle) * progress;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <Servo_Update+0xd4>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <Servo_Update+0xd4>)
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb43 	bl	8000178 <__aeabi_fsub>
 8000af2:	4603      	mov	r3, r0
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc48 	bl	800038c <__aeabi_fmul>
 8000afc:	4603      	mov	r3, r0
    float current_angle = servo.start_angle +
 8000afe:	4619      	mov	r1, r3
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff fb3b 	bl	800017c <__addsf3>
 8000b06:	4603      	mov	r3, r0
 8000b08:	607b      	str	r3, [r7, #4]

    Servo_SetAngle((uint16_t)current_angle);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fe04 	bl	8000718 <__aeabi_f2uiz>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff2d 	bl	8000974 <Servo_SetAngle>
 8000b1a:	e000      	b.n	8000b1e <Servo_Update+0xce>
    if(!servo.is_moving) return;
 8000b1c:	bf00      	nop
}
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	43340000 	.word	0x43340000

08000b30 <main>:
    }
    return servo.end_angle;
}

int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
    SysClock_Init();
 8000b36:	f7ff fe0f 	bl	8000758 <SysClock_Init>
    GPIO_Init();
 8000b3a:	f7ff fe8b 	bl	8000854 <GPIO_Init>
    SysTick_Init();
 8000b3e:	f7ff fea9 	bl	8000894 <SysTick_Init>
    Timer2_PWM_Init();
 8000b42:	f7ff fecb 	bl	80008dc <Timer2_PWM_Init>
    SystemCoreClockUpdate();
 8000b46:	f000 f829 	bl	8000b9c <SystemCoreClockUpdate>

    // Bắt đầu chuyển động đầu tiên
    Servo_StartMove(180.0f, 2000); // Quay từ 0 đến 180 trong 2 giây
 8000b4a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <main+0x54>)
 8000b50:	f7ff ff34 	bl	80009bc <Servo_StartMove>

    // LED blink variables
    uint32_t last_blink = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
    uint32_t blink_interval = 500;
 8000b58:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b5c:	603b      	str	r3, [r7, #0]

    while(1)
    {
        // Task 1: Cập nhật servo (KHÔNG DÙNG DELAY)
        Servo_Update();
 8000b5e:	f7ff ff77 	bl	8000a50 <Servo_Update>

        // Task 2: Blink LED
        if(msTick - last_blink >= blink_interval) {
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <main+0x58>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f6      	bhi.n	8000b5e <main+0x2e>
            last_blink = msTick;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <main+0x58>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	607b      	str	r3, [r7, #4]
            GPIOC->ODR ^= (1U<<13);
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <main+0x5c>)
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <main+0x5c>)
 8000b7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000b80:	60d3      	str	r3, [r2, #12]
        Servo_Update();
 8000b82:	e7ec      	b.n	8000b5e <main+0x2e>
 8000b84:	43340000 	.word	0x43340000
 8000b88:	20000034 	.word	0x20000034
 8000b8c:	40011000 	.word	0x40011000

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <SystemCoreClockUpdate+0xd0>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b08      	cmp	r3, #8
 8000bbc:	d011      	beq.n	8000be2 <SystemCoreClockUpdate+0x46>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d83a      	bhi.n	8000c3a <SystemCoreClockUpdate+0x9e>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <SystemCoreClockUpdate+0x36>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d004      	beq.n	8000bda <SystemCoreClockUpdate+0x3e>
 8000bd0:	e033      	b.n	8000c3a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000bd4:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <SystemCoreClockUpdate+0xd8>)
 8000bd6:	601a      	str	r2, [r3, #0]
      break;
 8000bd8:	e033      	b.n	8000c42 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000bdc:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <SystemCoreClockUpdate+0xd8>)
 8000bde:	601a      	str	r2, [r3, #0]
      break;
 8000be0:	e02f      	b.n	8000c42 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000be2:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <SystemCoreClockUpdate+0xd0>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000bea:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <SystemCoreClockUpdate+0xd0>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bf4:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	0c9b      	lsrs	r3, r3, #18
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d106      	bne.n	8000c12 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <SystemCoreClockUpdate+0xdc>)
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c0e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000c10:	e017      	b.n	8000c42 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000c12:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <SystemCoreClockUpdate+0xd0>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	4a15      	ldr	r2, [pc, #84]	@ (8000c78 <SystemCoreClockUpdate+0xdc>)
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c28:	6013      	str	r3, [r2, #0]
      break;
 8000c2a:	e00a      	b.n	8000c42 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4a11      	ldr	r2, [pc, #68]	@ (8000c74 <SystemCoreClockUpdate+0xd8>)
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c36:	6013      	str	r3, [r2, #0]
      break;
 8000c38:	e003      	b.n	8000c42 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <SystemCoreClockUpdate+0xd8>)
 8000c3e:	601a      	str	r2, [r3, #0]
      break;
 8000c40:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <SystemCoreClockUpdate+0xd0>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <SystemCoreClockUpdate+0xe0>)
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <SystemCoreClockUpdate+0xd4>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	20000014 	.word	0x20000014
 8000c74:	007a1200 	.word	0x007a1200
 8000c78:	003d0900 	.word	0x003d0900
 8000c7c:	08000d34 	.word	0x08000d34

08000c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff ff84 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000cae:	f000 f811 	bl	8000cd4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000cb2:	f7ff ff3d 	bl	8000b30 <main>

08000cb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000cc4:	08000d4c 	.word	0x08000d4c
  ldr r2, =_sbss
 8000cc8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ccc:	20000038 	.word	0x20000038

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <__libc_init_array>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	4d0c      	ldr	r5, [pc, #48]	@ (8000d0c <__libc_init_array+0x38>)
 8000cda:	4c0d      	ldr	r4, [pc, #52]	@ (8000d10 <__libc_init_array+0x3c>)
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	10a4      	asrs	r4, r4, #2
 8000ce0:	42a6      	cmp	r6, r4
 8000ce2:	d109      	bne.n	8000cf8 <__libc_init_array+0x24>
 8000ce4:	f000 f81a 	bl	8000d1c <_init>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	4d0a      	ldr	r5, [pc, #40]	@ (8000d14 <__libc_init_array+0x40>)
 8000cec:	4c0a      	ldr	r4, [pc, #40]	@ (8000d18 <__libc_init_array+0x44>)
 8000cee:	1b64      	subs	r4, r4, r5
 8000cf0:	10a4      	asrs	r4, r4, #2
 8000cf2:	42a6      	cmp	r6, r4
 8000cf4:	d105      	bne.n	8000d02 <__libc_init_array+0x2e>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfc:	4798      	blx	r3
 8000cfe:	3601      	adds	r6, #1
 8000d00:	e7ee      	b.n	8000ce0 <__libc_init_array+0xc>
 8000d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d06:	4798      	blx	r3
 8000d08:	3601      	adds	r6, #1
 8000d0a:	e7f2      	b.n	8000cf2 <__libc_init_array+0x1e>
 8000d0c:	08000d44 	.word	0x08000d44
 8000d10:	08000d44 	.word	0x08000d44
 8000d14:	08000d44 	.word	0x08000d44
 8000d18:	08000d48 	.word	0x08000d48

08000d1c <_init>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr

08000d28 <_fini>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr
